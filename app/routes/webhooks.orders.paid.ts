import type { ActionFunctionArgs } from "@remix-run/node";
import { json } from "@remix-run/node";
import crypto from "crypto";
import { saveOrderAnalytics, type OrderData } from "../lib/analytics.server";

export async function action({ request }: ActionFunctionArgs) {
  const rawBody = await request.text();
  const hmacHeader = request.headers.get("X-Shopify-Hmac-Sha256");
  const isTest = request.headers.get("X-Shopify-Test") === "true";
  const shopDomain = request.headers.get("X-Shopify-Shop-Domain") || "unknown";

  console.log("üîç Debug HMAC:");
  console.log("Raw body length:", rawBody.length);
  console.log("Is test webhook:", isTest);
  console.log("HMAC header:", hmacHeader);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º HMAC —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö webhook'–æ–≤ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö)
  if (hmacHeader && !isTest) {
    const secret = process.env.SHOPIFY_WEBHOOK_SECRET;
    const generatedHash = crypto
      .createHmac("sha256", secret || "")
      .update(rawBody, "utf8")
      .digest("base64");

    console.log("Generated HMAC:", generatedHash);
    console.log("Match:", generatedHash === hmacHeader);

    if (generatedHash !== hmacHeader) {
      console.error("‚ùå Invalid HMAC");
      return json({ error: "Invalid signature" }, { status: 403 });
    }
  } else if (isTest) {
    console.log("üß™ Test webhook from Shopify - skipping HMAC validation");
  } else {
    console.log("üîì No HMAC header - manual test request");
  }

  // –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞ ‚Äî –ø–∞—Ä—Å–∏–º JSON
  const payload = JSON.parse(rawBody);
  console.log("‚úÖ Webhook orders/paid payload:", payload);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const orderData: OrderData = {
    orderId: payload.id.toString(),
    orderName: payload.name,
    shopDomain,
    customerEmail: payload.email || payload.contact_email,
    discountAmount: parseFloat(payload.total_discounts || "0"),
    totalAmount: parseFloat(payload.total_price || "0"),
    lineItemsCount: payload.line_items?.length || 0,
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ—Ä–æ–Ω–∫—É –ø–æ —Å–∫–∏–¥–∫–∞–º
    funnelId: payload.discount_applications?.[0]?.title || undefined,
    funnelName: payload.discount_applications?.[0]?.title || undefined,
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  const saveResult = await saveOrderAnalytics(orderData);

  if (saveResult.success) {
    console.log("‚úÖ Order analytics saved to database successfully");
  } else {
    console.error("‚ùå Failed to save order analytics:", saveResult.error);
  }

  return json({ ok: true });
}
