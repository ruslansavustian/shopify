import prisma from "../db.server";

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è TypeScript –æ—à–∏–±–æ–∫
// @ts-ignore
const shopAnalytics = prisma.shopAnalytics;
// @ts-ignore
const funnelPerformance = prisma.funnelPerformance;

export interface OrderData {
  orderId: string;
  orderName: string;
  shopDomain: string;
  customerEmail?: string;
  discountAmount: number;
  totalAmount: number;
  lineItemsCount: number;
  funnelId?: string;
  funnelName?: string;
}

export interface AnalyticsSummary {
  // Sales Analytics
  totalOrders: number;
  totalSales: number;
  averageOrderValue: number;

  // Discount Analytics
  totalDiscountsIssued: number;
  totalDiscountAmount: number;
  averageDiscountAmount: number;
  ordersWithDiscounts: number;
  discountRate: number; // % –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏

  // Funnel Performance
  funnelPerformance: Array<{
    funnelId: string;
    funnelName: string;
    discountsIssued: number;
    totalDiscountAmount: number;
    ordersAffected: number;
    conversionRate: number;
  }>;

  lastUpdated: string;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
 */
export async function saveOrderAnalytics(orderData: OrderData) {
  try {
    console.log("ÔøΩÔøΩ Saving order analytics to DB:", orderData);

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
    await updateShopAnalytics(
      orderData.shopDomain,
      orderData.discountAmount,
      orderData.totalAmount,
    );

    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (orderData.funnelId && orderData.funnelName) {
      await updateFunnelPerformance(
        orderData.funnelId,
        orderData.funnelName,
        orderData.shopDomain,
        orderData.discountAmount,
      );
    }

    console.log("‚úÖ Order analytics saved successfully");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Error saving order analytics:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
 */

async function updateShopAnalytics(
  shopDomain: string,
  discountAmount: number,
  totalAmount: number,
) {
  try {
    await shopAnalytics.upsert({
      where: { shopDomain },
      update: {
        totalDiscountsIssued: { increment: 1 },
        totalDiscountAmount: { increment: discountAmount },
        totalOrders: { increment: 1 },
        totalSales: { increment: totalAmount }, // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
        lastUpdated: new Date(),
      },
      create: {
        shopDomain,
        totalDiscountsIssued: 1,
        totalDiscountAmount: discountAmount,
        totalOrders: 1,
        totalSales: totalAmount,
      },
    });
  } catch (error) {
    console.error("‚ùå Error updating shop analytics:", error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Ä–æ–Ω–∫–∏
 */
async function updateFunnelPerformance(
  funnelId: string,
  funnelName: string,
  shopDomain: string,
  discountAmount: number,
) {
  try {
    const result = await funnelPerformance.upsert({
      where: { funnelId },
      update: {
        discountsIssued: { increment: 1 },
        totalDiscountAmount: { increment: discountAmount },
        ordersAffected: { increment: 1 },
        updatedAt: new Date(),
      },
      create: {
        funnelId,
        funnelName,
        shopDomain,
        discountsIssued: 1,
        totalDiscountAmount: discountAmount,
        ordersAffected: 1,
        conversionRate: 0,
      },
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º conversion rate
    const conversionRate =
      result.ordersAffected > 0
        ? (result.discountsIssued / result.ordersAffected) * 100
        : 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º conversion rate
    await funnelPerformance.update({
      where: { funnelId },
      data: { conversionRate },
    });

    console.log(
      `üìà Updated funnel performance for ${funnelName}: ${conversionRate.toFixed(1)}% conversion rate`,
    );
  } catch (error) {
    console.error("‚ùå Error updating funnel performance:", error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
 */
export async function getAnalyticsSummary(
  shopDomain: string,
): Promise<AnalyticsSummary> {
  try {
    console.log("üìä Getting analytics summary for shop:", shopDomain);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
    const shopAnalyticsResult = await shopAnalytics.findUnique({
      where: { shopDomain },
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
    const funnelPerformanceResult = await funnelPerformance.findMany({
      where: { shopDomain },
      orderBy: { totalDiscountAmount: "desc" },
    });

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
    const ordersWithDiscounts = await prisma.orderAnalytics.count({
      where: {
        shopDomain,
        discountAmount: { gt: 0 },
      },
    });

    const totalOrders = shopAnalyticsResult?.totalOrders || 0;
    const totalSales = shopAnalyticsResult?.totalSales || 0;
    const totalDiscountsIssued = shopAnalyticsResult?.totalDiscountsIssued || 0;
    const totalDiscountAmount = shopAnalyticsResult?.totalDiscountAmount || 0;

    const summary: AnalyticsSummary = {
      // Sales Analytics
      totalOrders,
      totalSales,
      averageOrderValue: totalOrders > 0 ? totalSales / totalOrders : 0,

      // Discount Analytics
      totalDiscountsIssued,
      totalDiscountAmount,
      averageDiscountAmount:
        totalDiscountsIssued > 0
          ? totalDiscountAmount / totalDiscountsIssued
          : 0,
      ordersWithDiscounts,
      discountRate:
        totalOrders > 0 ? (ordersWithDiscounts / totalOrders) * 100 : 0,

      // Funnel Performance
      funnelPerformance: funnelPerformanceResult.map((funnel: any) => ({
        funnelId: funnel.funnelId,
        funnelName: funnel.funnelName,
        discountsIssued: funnel.discountsIssued,
        totalDiscountAmount: funnel.totalDiscountAmount,
        ordersAffected: funnel.ordersAffected,
        conversionRate: funnel.conversionRate,
      })),

      lastUpdated:
        shopAnalyticsResult?.lastUpdated?.toISOString() ||
        new Date().toISOString(),
    };

    console.log("‚úÖ Analytics summary retrieved successfully");
    return summary;
  } catch (error) {
    console.error("‚ùå Error getting analytics summary:", error);
    return {
      totalOrders: 0,
      totalSales: 0,
      averageOrderValue: 0,
      totalDiscountsIssued: 0,
      totalDiscountAmount: 0,
      averageDiscountAmount: 0,
      ordersWithDiscounts: 0,
      discountRate: 0,
      funnelPerformance: [],
      lastUpdated: new Date().toISOString(),
    };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ
 */
export async function getFunnelAnalytics(funnelId: string) {
  try {
    const funnel = await funnelPerformance.findUnique({
      where: { funnelId },
    });

    if (!funnel) {
      return null;
    }

    return funnel;
  } catch (error) {
    console.error("‚ùå Error getting funnel analytics:", error);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
 */
export async function cleanupOldAnalytics() {
  try {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 90);

    const deletedOrders = await prisma.orderAnalytics.deleteMany({
      where: {
        createdAt: {
          lt: cutoffDate,
        },
      },
    });

    console.log(`üßπ Cleaned up ${deletedOrders.count} old order records`);
    return { success: true, deletedCount: deletedOrders.count };
  } catch (error) {
    console.error("‚ùå Error cleaning up old analytics:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}
